{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useCallback, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Overlay } from 'react-native-elements';\nimport { GiftedChat } from 'react-native-gifted-chat';\nimport 'dayjs/locale/ja';\nimport { useNavigation } from '@react-navigation/native';\nimport Ionicons from \"@expo/vector-icons/Ionicons\";\nimport { images } from \"../../assets/index\";\nimport { renderInputToolbar, renderActions, renderComposer, renderSend } from \"../components/InputToolbar\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ChatRoomScreen = function ChatRoomScreen() {\n  var navigation = useNavigation();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  var id = 1;\n  onSend = useCallback(function () {\n    var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    setMessages(function (previousMessages) {\n      return GiftedChat.append(GiftedChat.append(previousMessages, messages), [{\n        _id: id,\n        text: 'すぐ会いたいです!',\n        createdAt: new Date(),\n        user: {\n          _id: 2,\n          name: 'React Native',\n          avatar: images.minami\n        }\n      }]);\n    });\n    id++;\n  }, []);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Header, {\n      navigation: navigation\n    }), _jsx(GiftedChat, {\n      messages: messages,\n      onSend: function (_onSend) {\n        function onSend(_x) {\n          return _onSend.apply(this, arguments);\n        }\n\n        onSend.toString = function () {\n          return _onSend.toString();\n        };\n\n        return onSend;\n      }(function (messages) {\n        return onSend(messages);\n      }),\n      user: {\n        _id: id,\n        name: 'you',\n        avater: 'https://placeimg.com/140/140/any'\n      },\n      locale: \"ja\",\n      placeholder: \"\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8\\u3092\\u5165\\u529B\",\n      keyboardShouldPersistTaps: \"never\",\n      timeFormat: \"H:mm\",\n      onPressAvatar: console.log,\n      containerStyle: styles.sendArea,\n      textInputStyle: styles.sendInput,\n      alignTop: true,\n      alwaysShowSend: true,\n      infiniteScroll: true,\n      isLoadingEarlier: true,\n      listViewProps: {\n        onEndReachedThreshold: 0.4\n      },\n      renderInputToolbar: renderInputToolbar,\n      renderActions: renderActions,\n      renderComposer: renderComposer,\n      renderSend: renderSend,\n      messagesContainerStyle: {\n        backgroundColor: '#eee8aa'\n      },\n      parsePatterns: function parsePatterns(linkStyle) {\n        return [{\n          pattern: /#(\\w+)/,\n          style: linkStyle,\n          onPress: function onPress(tag) {\n            return console.log(\"Pressed on hashtag: \" + tag);\n          }\n        }];\n      }\n    })]\n  });\n};\n\nvar Header = function Header(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      visible = _useState4[0],\n      setVisible = _useState4[1];\n\n  var toggleOverlay = function toggleOverlay() {\n    setVisible(!visible);\n  };\n\n  return _jsxs(View, {\n    style: styles.headerWrapper,\n    children: [_jsx(View, {\n      style: [styles.childContainer, {\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        alignItems: 'center'\n      }],\n      children: _jsxs(View, {\n        style: {\n          flexDirection: 'row',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: [_jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return navigation.goBack();\n          },\n          children: _jsx(Ionicons, {\n            name: \"arrow-back\"\n          })\n        }), _jsx(Text, {\n          style: {\n            fontWeight: \"normal\",\n            marginLeft: 20\n          },\n          h4: true,\n          children: \"Messaging\"\n        })]\n      })\n    }), _jsx(Overlay, {\n      isVisible: visible,\n      onBackdropPress: toggleOverlay,\n      children: _jsx(View, {\n        style: [styles.flexify, {\n          marginHorizontal: 5,\n          marginTop: 10\n        }]\n      })\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  sendArea: {\n    backgroundColor: '#bdb76b'\n  },\n  sendInput: {\n    borderWidth: 0.5,\n    borderColor: 'gray',\n    borderRadius: 15,\n    marginRight: 10,\n    padding: 10,\n    backgroundColor: '#FFF'\n  },\n  sendButton: {\n    backgroundColor: '#F08300',\n    color: '#000',\n    padding: 10,\n    borderRadius: 10,\n    margin: 5,\n    marginLeft: 0,\n    height: 34\n  },\n  headerWrapper: {\n    shadowColor: '#171717',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 3,\n    paddingVertical: 15,\n    backgroundColor: 'white'\n  },\n  childContainer: {\n    paddingTop: StatusBar.currentHeight,\n    paddingHorizontal: 20,\n    width: '90%',\n    marginVertical: 0,\n    marginHorizontal: 'auto'\n  },\n  flexify: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between'\n  }\n});\nexport { ChatRoomScreen };","map":{"version":3,"sources":["C:/Users/yumej/github/nikoichi/src/screens/ChatRoomScreen.js"],"names":["React","useCallback","useState","Overlay","GiftedChat","useNavigation","Ionicons","images","renderInputToolbar","renderActions","renderComposer","renderSend","ChatRoomScreen","navigation","messages","setMessages","id","onSend","previousMessages","append","_id","text","createdAt","Date","user","name","avatar","minami","styles","container","avater","console","log","sendArea","sendInput","onEndReachedThreshold","backgroundColor","linkStyle","pattern","style","onPress","tag","Header","visible","setVisible","toggleOverlay","headerWrapper","childContainer","flexDirection","justifyContent","alignItems","goBack","fontWeight","marginLeft","flexify","marginHorizontal","marginTop","StyleSheet","create","flex","borderWidth","borderColor","borderRadius","marginRight","padding","sendButton","color","margin","height","shadowColor","shadowOffset","width","shadowOpacity","shadowRadius","paddingVertical","paddingTop","StatusBar","currentHeight","paddingHorizontal","marginVertical"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react';\r\nimport { StyleSheet, View, TouchableOpacity, Text, StatusBar, Image } from 'react-native';\r\nimport { Overlay } from 'react-native-elements';\r\nimport { GiftedChat } from 'react-native-gifted-chat';\r\nimport 'dayjs/locale/ja';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport Ionicons from 'react-native-vector-icons/Ionicons';\r\n\r\nimport { images } from '../../assets/index';\r\nimport { renderInputToolbar, renderActions, renderComposer, renderSend } from '../components/InputToolbar';\r\n\r\nconst ChatRoomScreen = () => {\r\n    const navigation = useNavigation();\r\n    \r\n    const [messages, setMessages] = useState([]);\r\n    let id = 1;\r\n\r\n    onSend = useCallback((messages = []) => {\r\n        setMessages((previousMessages) => GiftedChat.append(GiftedChat.append(previousMessages, messages),[\r\n            {\r\n              _id: id,\r\n              text: 'すぐ会いたいです!',\r\n              createdAt: new Date(),\r\n              user: {\r\n                _id: 2,\r\n                name: 'React Native',\r\n                avatar: images.minami,\r\n              },\r\n            },\r\n          ]));\r\n        id++\r\n    },[])\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <Header navigation={navigation}></Header>\r\n        \r\n            <GiftedChat\r\n                messages={messages}\r\n                onSend={(messages) => onSend(messages)}\r\n                user={{\r\n                    _id: id,\r\n                    name: 'you',\r\n                    avater: 'https://placeimg.com/140/140/any'\r\n                }}\r\n                locale='ja'\r\n                placeholder='メッセージを入力'\r\n                keyboardShouldPersistTaps='never'\r\n                timeFormat='H:mm'\r\n                onPressAvatar={console.log}\r\n                containerStyle={styles.sendArea}\r\n                textInputStyle={styles.sendInput}\r\n                alignTop={true}\r\n                alwaysShowSend={true}\r\n                infiniteScroll={true}\r\n                // loadEarlier={isLoadingEarlier}\r\n                isLoadingEarlier={true}\r\n                listViewProps={{\r\n                    // onEndReached: this.onEndReached,\r\n                    onEndReachedThreshold: 0.4,\r\n                }}\r\n                renderInputToolbar={renderInputToolbar}\r\n                renderActions={renderActions}\r\n                renderComposer={renderComposer}\r\n                renderSend={renderSend}\r\n                messagesContainerStyle={{ backgroundColor: '#eee8aa' }}\r\n                parsePatterns={(linkStyle) => [\r\n                    {\r\n                    pattern: /#(\\w+)/,\r\n                    style: linkStyle,\r\n                    onPress: (tag) => console.log(`Pressed on hashtag: ${tag}`),\r\n                    },\r\n                ]}\r\n            />\r\n        </View>\r\n    );\r\n\r\n    \r\n}\r\n\r\nconst Header = ({ navigation }) => {\r\n    const [visible, setVisible] = useState(false)\r\n  \r\n    const toggleOverlay = () => {\r\n      setVisible(!visible)\r\n    }\r\n  \r\n    return (\r\n      <View style={styles.headerWrapper} >\r\n        <View\r\n          style={[\r\n            styles.childContainer,\r\n            {\r\n              flexDirection: 'row',\r\n              justifyContent: 'space-between',\r\n              alignItems: 'center',\r\n            },\r\n          ]}\r\n          \r\n        >\r\n          <View\r\n            style={{\r\n              flexDirection: 'row',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n            }}\r\n          >\r\n            <TouchableOpacity onPress={() => navigation.goBack()}>\r\n              <Ionicons name=\"arrow-back\" />\r\n            </TouchableOpacity>\r\n  \r\n            <Text style={{ fontWeight: \"normal\", marginLeft: 20 }} h4>\r\n              Messaging\r\n            </Text>\r\n          </View>\r\n        </View>\r\n  \r\n        <Overlay isVisible={visible} onBackdropPress={toggleOverlay}>\r\n          <View\r\n            style={[styles.flexify, { marginHorizontal: 5, marginTop: 10 }]}\r\n          >\r\n          </View>\r\n        </Overlay>\r\n      </View>\r\n    )\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n    },\r\n    sendArea: {\r\n        backgroundColor: '#bdb76b',\r\n    },\r\n    sendInput: {\r\n        borderWidth: 0.5,\r\n        borderColor: 'gray',\r\n        borderRadius: 15,\r\n        marginRight: 10,\r\n        padding: 10,\r\n        backgroundColor: '#FFF',\r\n    },\r\n    sendButton: {\r\n        backgroundColor: '#F08300',\r\n        color: '#000',\r\n        padding: 10,\r\n        borderRadius: 10,\r\n        margin: 5,\r\n        marginLeft: 0,\r\n        height: 34,\r\n    },\r\n    headerWrapper: {\r\n        shadowColor: '#171717',\r\n        shadowOffset:{\r\n          width: 0,\r\n          height: 2,\r\n        },\r\n        shadowOpacity: 0.2,\r\n        shadowRadius: 3,\r\n        paddingVertical: 15,\r\n        backgroundColor: 'white',\r\n      },\r\n      childContainer: {\r\n        paddingTop: StatusBar.currentHeight,\r\n        paddingHorizontal: 20,\r\n        width: '90%',\r\n        marginVertical: 0,\r\n        marginHorizontal: 'auto',\r\n      },\r\n      flexify: {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n      },\r\n});\r\n\r\nexport {ChatRoomScreen};"]},"metadata":{},"sourceType":"module"}