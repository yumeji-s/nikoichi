{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useCallback, useState, useEffect, useRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { Overlay } from 'react-native-elements';\nimport { GiftedChat } from 'react-native-gifted-chat';\nimport 'dayjs/locale/ja';\nimport Ionicons from \"@expo/vector-icons/Ionicons\";\nimport { addDoc, doc, setDoc, getDoc, getDocs, updateDoc, collection, query, where, limit, onSnapshot, orderBy, startAfter } from 'firebase/firestore';\nimport { renderInputToolbar, renderActions, renderComposer, renderSend } from \"../components/InputToolbar\";\nimport { auth, firestore } from \"../../firebase\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ChatRoomScreen = function ChatRoomScreen(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentUser = _useState2[0],\n      setCurrentUser = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      sentinel = _useState4[0],\n      setSentinel = _useState4[1];\n\n  var chatRoom = route.params.chatRoom;\n  var messageRef = collection(firestore, \"chat/\" + chatRoom + \"/messages\");\n\n  var _useInfiniteSnapshotL = useInfiniteSnapshotListener(chatRoom),\n      messages = _useInfiniteSnapshotL.messages,\n      readMore = _useInfiniteSnapshotL.readMore,\n      initRead = _useInfiniteSnapshotL.initRead;\n\n  useEffect(function _callee() {\n    var userRef, snapShot, q, querySnapshot;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            userRef = doc(firestore, \"users/\" + auth.currentUser.uid);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(getDoc(userRef));\n\n          case 3:\n            snapShot = _context.sent;\n\n            if (snapShot.exists()) {\n              setCurrentUser(_objectSpread({}, snapShot.data()));\n            }\n\n            q = query(messageRef, orderBy('createdAt', 'asc'), limit(1));\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(getDocs(q));\n\n          case 8:\n            querySnapshot = _context.sent;\n            querySnapshot.forEach(function (doc) {\n              setSentinel(doc);\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, []);\n  useEffect(function () {\n    initRead();\n  }, [initRead]);\n  var hasMore = sentinel ? !Boolean(messages.find(function (m) {\n    return m.id === sentinel.id;\n  })) : false;\n\n  var _onSend = function onSend() {\n    var messages,\n        messageSnap,\n        _args2 = arguments;\n    return _regeneratorRuntime.async(function onSend$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            messages = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : [];\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(addDoc.apply(void 0, [messageRef].concat(_toConsumableArray(messages))));\n\n          case 3:\n            messageSnap = _context2.sent;\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Header, {\n      navigation: navigation\n    }), _jsx(GiftedChat, {\n      messages: messages,\n      onSend: function onSend(messages) {\n        return _onSend(messages);\n      },\n      user: {\n        _id: currentUser.uid,\n        name: currentUser.name,\n        avatar: currentUser.imgURL\n      },\n      locale: \"ja\",\n      placeholder: \"\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8\\u3092\\u5165\\u529B\",\n      keyboardShouldPersistTaps: \"never\",\n      timeFormat: \"H:mm\",\n      onPressAvatar: console.log,\n      containerStyle: styles.sendArea,\n      textInputStyle: styles.sendInput,\n      alignTop: true,\n      alwaysShowSend: true,\n      infiniteScroll: true,\n      isLoadingEarlier: hasMore,\n      listViewProps: {\n        onEndReached: readMore(),\n        onEndReachedThreshold: 0.4\n      },\n      renderInputToolbar: renderInputToolbar,\n      renderActions: renderActions,\n      renderComposer: renderComposer,\n      renderSend: renderSend,\n      messagesContainerStyle: {\n        backgroundColor: '#eee8aa'\n      },\n      parsePatterns: function parsePatterns(linkStyle) {\n        return [{\n          pattern: /#(\\w+)/,\n          style: linkStyle,\n          onPress: function onPress(tag) {\n            return console.log(\"Pressed on hashtag: \" + tag);\n          }\n        }];\n      }\n    })]\n  });\n};\n\nvar now = Date.now();\n\nvar useInfiniteSnapshotListener = function useInfiniteSnapshotListener(chatRoom) {\n  var unsubscribes = useRef([]);\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      messages = _useState6[0],\n      setMessages = _useState6[1];\n\n  var messageRef = collection(firestore, \"chat/\" + chatRoom + \"/messages\");\n  var registLatestMessageListener = useCallback(function () {\n    return onSnapshot(query(messageRef, orderBy(\"createdAt\", \"asc\"), startAfter(now)), function (snapshot) {\n      dispMsgSnap(snapshot);\n    });\n  }, []);\n  var registPastMessageListener = useCallback(function (time) {\n    return onSnapshot(query(messageRef, orderBy(\"createdAt\", \"desc\"), startAfter(time), limit(5)), function (snapshot) {\n      dispMsgSnap(snapshot);\n    });\n  }, []);\n  var initRead = useCallback(function () {\n    unsubscribes.current.push(registLatestMessageListener());\n    unsubscribes.current.push(registPastMessageListener(now));\n  }, [registPastMessageListener]);\n  var lastMessageDate = messages.length > 0 ? messages[messages.length - 1].createdAt : now;\n  var readMore = useCallback(function () {\n    unsubscribes.current.push(registPastMessageListener(lastMessageDate));\n  }, [registPastMessageListener, lastMessageDate]);\n  var clear = useCallback(function () {\n    for (var _iterator = _createForOfIteratorHelperLoose(unsubscribes.current), _step; !(_step = _iterator()).done;) {\n      var unsubscribe = _step.value;\n      unsubscribe();\n    }\n  }, []);\n  useEffect(function () {\n    return function () {\n      clear();\n    };\n  }, [clear]);\n\n  var dispMsgSnap = function dispMsgSnap(snapshot) {\n    snapshot.docChanges().forEach(function (change) {\n      var id = change.doc.id;\n      var chat = change.doc.data();\n      var newMessage = {\n        _id: id,\n        text: chat.text,\n        createdAt: chat.createdAt.toDate(),\n        user: {\n          _id: chat.user._id,\n          name: chat.user.name,\n          avatar: chat.user.avatar\n        }\n      };\n\n      switch (change.type) {\n        case 'added':\n          msgAppend(newMessage);\n          break;\n\n        case 'modified':\n          break;\n\n        case 'removed':\n          break;\n\n        default:\n          break;\n      }\n    });\n  };\n\n  var msgAppend = function msgAppend() {\n    var newMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    setMessages(function (previousMessages) {\n      return GiftedChat.append(previousMessages, newMessage);\n    });\n  };\n\n  return {\n    initRead: initRead,\n    readMore: readMore,\n    messages: messages\n  };\n};\n\nvar Header = function Header(_ref2) {\n  var navigation = _ref2.navigation;\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      visible = _useState8[0],\n      setVisible = _useState8[1];\n\n  var toggleOverlay = function toggleOverlay() {\n    setVisible(!visible);\n  };\n\n  return _jsxs(View, {\n    style: styles.headerWrapper,\n    children: [_jsx(View, {\n      style: [styles.childContainer, {\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        alignItems: 'center'\n      }],\n      children: _jsxs(View, {\n        style: {\n          flexDirection: 'row',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: [_jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return navigation.goBack();\n          },\n          children: _jsx(Ionicons, {\n            name: \"arrow-back\"\n          })\n        }), _jsx(Text, {\n          style: {\n            fontWeight: \"normal\",\n            marginLeft: 20\n          },\n          h4: true,\n          children: \"Messaging\"\n        })]\n      })\n    }), _jsx(Overlay, {\n      isVisible: visible,\n      onBackdropPress: toggleOverlay,\n      children: _jsx(View, {\n        style: [styles.flexify, {\n          marginHorizontal: 5,\n          marginTop: 10\n        }]\n      })\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  sendArea: {\n    backgroundColor: '#bdb76b'\n  },\n  sendInput: {\n    borderWidth: 0.5,\n    borderColor: 'gray',\n    borderRadius: 15,\n    marginRight: 10,\n    padding: 10,\n    backgroundColor: '#FFF'\n  },\n  sendButton: {\n    backgroundColor: '#F08300',\n    color: '#000',\n    padding: 10,\n    borderRadius: 10,\n    margin: 5,\n    marginLeft: 0,\n    height: 34\n  },\n  headerWrapper: {\n    shadowColor: '#171717',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 3,\n    paddingVertical: 15,\n    backgroundColor: 'white'\n  },\n  childContainer: {\n    paddingTop: StatusBar.currentHeight,\n    paddingHorizontal: 20,\n    width: '90%',\n    marginVertical: 0,\n    marginHorizontal: 'auto'\n  },\n  flexify: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between'\n  }\n});\nexport { ChatRoomScreen };","map":{"version":3,"sources":["C:/Users/yumej/github/nikoichi/src/screens/ChatRoomScreen.js"],"names":["React","useCallback","useState","useEffect","useRef","Overlay","GiftedChat","Ionicons","addDoc","doc","setDoc","getDoc","getDocs","updateDoc","collection","query","where","limit","onSnapshot","orderBy","startAfter","renderInputToolbar","renderActions","renderComposer","renderSend","auth","firestore","ChatRoomScreen","route","navigation","currentUser","setCurrentUser","sentinel","setSentinel","chatRoom","params","messageRef","useInfiniteSnapshotListener","messages","readMore","initRead","userRef","uid","snapShot","exists","data","q","querySnapshot","forEach","hasMore","Boolean","find","m","id","onSend","messageSnap","styles","container","_id","name","avatar","imgURL","console","log","sendArea","sendInput","onEndReached","onEndReachedThreshold","backgroundColor","linkStyle","pattern","style","onPress","tag","now","Date","unsubscribes","setMessages","registLatestMessageListener","snapshot","dispMsgSnap","registPastMessageListener","time","current","push","lastMessageDate","length","createdAt","clear","unsubscribe","docChanges","change","chat","newMessage","text","toDate","user","type","msgAppend","previousMessages","append","Header","visible","setVisible","toggleOverlay","headerWrapper","childContainer","flexDirection","justifyContent","alignItems","goBack","fontWeight","marginLeft","flexify","marginHorizontal","marginTop","StyleSheet","create","flex","borderWidth","borderColor","borderRadius","marginRight","padding","sendButton","color","margin","height","shadowColor","shadowOffset","width","shadowOpacity","shadowRadius","paddingVertical","paddingTop","StatusBar","currentHeight","paddingHorizontal","marginVertical"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect, useRef } from 'react';\r\nimport { StyleSheet, View, TouchableOpacity, Text, StatusBar } from 'react-native';\r\nimport { Overlay } from 'react-native-elements';\r\nimport { GiftedChat } from 'react-native-gifted-chat';\r\nimport 'dayjs/locale/ja';\r\nimport Ionicons from 'react-native-vector-icons/Ionicons';\r\nimport { addDoc, doc, setDoc, getDoc, getDocs, updateDoc, collection, query, where, limit, onSnapshot, orderBy, startAfter } from 'firebase/firestore';\r\n\r\nimport { renderInputToolbar, renderActions, renderComposer, renderSend } from '../components/InputToolbar';\r\nimport { auth, firestore } from '../../firebase';\r\n// import { useInfiniteSnapshotListener } from '../components/ChatListener';\r\n\r\n\r\n\r\n// やること\r\n// 別のファイルに分ける\r\n\r\n\r\nconst ChatRoomScreen = ({ route, navigation }) => {\r\n    \r\n  // const [messages, setMessages] = useState([]);                           // 全メッセージ\r\n  const [currentUser, setCurrentUser] = useState([]);                     // ログインしているユーザ\r\n  const [sentinel, setSentinel] = useState();                             // 最後のメッセージのid\r\n  const { chatRoom } = route.params;                                      // チャットルーム名\r\n  const messageRef = collection(firestore, `chat/${chatRoom}/messages`);  // メッセージ登録用\r\n  const { messages, readMore, initRead } = useInfiniteSnapshotListener(chatRoom);\r\n  \r\n  useEffect(async () => {\r\n    // 最初のレンダリング時に自分の情報を取得\r\n    const userRef = doc(firestore, `users/${auth.currentUser.uid}`);\r\n    const snapShot = await getDoc(userRef);\r\n    if(snapShot.exists()){\r\n      setCurrentUser({\r\n        ...snapShot.data()\r\n      });\r\n    }\r\n\r\n    // 最後のメッセージを取得\r\n    const q = query(messageRef, orderBy('createdAt','asc'), limit(1));\r\n    const querySnapshot = await getDocs(q);\r\n    querySnapshot.forEach((doc) => {\r\n      setSentinel(doc);\r\n    });\r\n\r\n    // onSnapshot(query(messageRef, orderBy(\"createdAt\",\"asc\")), (snapshot) => {dispMsgSnap(snapshot)});\r\n  },[]);\r\n\r\n  // 初回読み込み\r\n  useEffect(()=>{\r\n    initRead();\r\n  },[initRead]);\r\n\r\n  // メッセージは残っているか\r\n  const hasMore = sentinel ? !Boolean(messages.find(m => m.id === sentinel.id)) : false;  \r\n\r\n  // 送信時の処理\r\n  const onSend = async (messages = []) => {\r\n    // メッセージをfirestoreに登録\r\n    const messageSnap = await addDoc(messageRef, ...messages);\r\n  };\r\n\r\n  return (\r\n      <View style={styles.container}>\r\n          <Header navigation={navigation}></Header>\r\n      \r\n          <GiftedChat\r\n              messages={messages}\r\n              onSend={(messages) => onSend(messages)}\r\n              user={{\r\n                  _id: currentUser.uid,\r\n                  name: currentUser.name,\r\n                  avatar: currentUser.imgURL\r\n              }}\r\n              locale='ja'\r\n              placeholder='メッセージを入力'\r\n              keyboardShouldPersistTaps='never'\r\n              timeFormat='H:mm'\r\n              onPressAvatar={console.log}\r\n              containerStyle={styles.sendArea}\r\n              textInputStyle={styles.sendInput}\r\n              alignTop={true}\r\n              alwaysShowSend={true}\r\n              infiniteScroll={true}\r\n              // loadEarlier={isLoadingEarlier}\r\n              isLoadingEarlier={hasMore}\r\n              listViewProps={{\r\n                  onEndReached: readMore(),\r\n                  onEndReachedThreshold: 0.4,\r\n              }}\r\n              renderInputToolbar={renderInputToolbar}\r\n              renderActions={renderActions}\r\n              renderComposer={renderComposer}\r\n              renderSend={renderSend}\r\n              messagesContainerStyle={{ backgroundColor: '#eee8aa' }}\r\n              parsePatterns={(linkStyle) => [\r\n                {\r\n                pattern: /#(\\w+)/,\r\n                style: linkStyle,\r\n                onPress: (tag) => console.log(`Pressed on hashtag: ${tag}`),\r\n                },\r\n              ]}\r\n          />\r\n      </View>\r\n  );\r\n}\r\n\r\nconst now = Date.now();\r\nconst useInfiniteSnapshotListener = (chatRoom) => {\r\n\r\n  const unsubscribes = useRef([]);\r\n  const [messages, setMessages] = useState([]);\r\n  const messageRef = collection(firestore, `chat/${chatRoom}/messages`);  // メッセージ登録用\r\n\r\n  // 未来（最新メッセージ）の購読リスナー\r\n  const registLatestMessageListener = useCallback(() => {\r\n      return onSnapshot(query(messageRef, orderBy(\"createdAt\",\"asc\"), startAfter(now)), (snapshot) => {dispMsgSnap(snapshot)});\r\n  },[]);\r\n\r\n  //過去メッセージの購読リスナー\r\n  const registPastMessageListener = useCallback((time) => {\r\n      return onSnapshot(query(messageRef, orderBy(\"createdAt\",\"desc\"), startAfter(time), limit(5)), (snapshot) => {dispMsgSnap(snapshot)});\r\n  },[]);\r\n\r\n  // 初回ロード\r\n  const initRead = useCallback(() => {\r\n    // 未来のメッセージを購読する\r\n    unsubscribes.current.push(registLatestMessageListener());\r\n    // 現時刻よりも古いデータを一定数、購読する\r\n    unsubscribes.current.push(registPastMessageListener(now));\r\n  },[registPastMessageListener]);\r\n\r\n  // スクロール時、追加購読するためのリスナー\r\n  const lastMessageDate = messages.length > 0 ? messages[messages.length - 1].createdAt : now;\r\n  \r\n  const readMore = useCallback(() => {\r\n    unsubscribes.current.push(registPastMessageListener(lastMessageDate));\r\n  },[registPastMessageListener,lastMessageDate]);\r\n\r\n  // 登録解除(Unmount時に解除）\r\n  const clear = useCallback(() => {\r\n    for(const unsubscribe of unsubscribes.current){\r\n      unsubscribe();\r\n    }\r\n  },[]);\r\n\r\n  useEffect(() => { return () => { clear(); }; }, [clear]);\r\n\r\n\r\n  const dispMsgSnap = (snapshot) => {\r\n    // 取得したメッセージを表示できるように加工\r\n    snapshot.docChanges().forEach((change) => {\r\n      const id = change.doc.id;\r\n      const chat = change.doc.data();\r\n      const newMessage = {\r\n        _id: id,\r\n        text: chat.text,\r\n        createdAt: chat.createdAt.toDate(),\r\n        user: {\r\n          _id: chat.user._id,\r\n          name: chat.user.name,\r\n          avatar: chat.user.avatar\r\n        }\r\n      };\r\n      switch(change.type){\r\n      case 'added':\r\n        msgAppend(newMessage);\r\n        break;\r\n      case 'modified':\r\n        break;\r\n      case 'removed':\r\n        break;\r\n      default: \r\n        break;\r\n      }\r\n    });\r\n  };\r\n  \r\n  const msgAppend = (newMessage = []) => {\r\n    // メッセージを連結\r\n    setMessages((previousMessages) => GiftedChat.append(previousMessages,newMessage));\r\n  };\r\n  return { initRead, readMore, messages };\r\n};\r\n\r\n\r\n\r\nconst Header = ({ navigation }) => {\r\n    const [visible, setVisible] = useState(false);\r\n  \r\n    const toggleOverlay = () => {\r\n      setVisible(!visible);\r\n    }\r\n  \r\n    return (\r\n      <View style={styles.headerWrapper} >\r\n        <View\r\n          style={[\r\n            styles.childContainer,\r\n            {\r\n              flexDirection: 'row',\r\n              justifyContent: 'space-between',\r\n              alignItems: 'center',\r\n            },\r\n          ]}\r\n          \r\n        >\r\n          <View\r\n            style={{\r\n              flexDirection: 'row',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n            }}\r\n          >\r\n            <TouchableOpacity onPress={() => navigation.goBack()}>\r\n              <Ionicons name=\"arrow-back\" />\r\n            </TouchableOpacity>\r\n  \r\n            <Text style={{ fontWeight: \"normal\", marginLeft: 20 }} h4>\r\n              Messaging\r\n            </Text>\r\n          </View>\r\n        </View>\r\n  \r\n        <Overlay isVisible={visible} onBackdropPress={toggleOverlay}>\r\n          <View\r\n            style={[styles.flexify, { marginHorizontal: 5, marginTop: 10 }]}\r\n          >\r\n          </View>\r\n        </Overlay>\r\n      </View>\r\n    )\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n    },\r\n    sendArea: {\r\n        backgroundColor: '#bdb76b',\r\n    },\r\n    sendInput: {\r\n        borderWidth: 0.5,\r\n        borderColor: 'gray',\r\n        borderRadius: 15,\r\n        marginRight: 10,\r\n        padding: 10,\r\n        backgroundColor: '#FFF',\r\n    },\r\n    sendButton: {\r\n        backgroundColor: '#F08300',\r\n        color: '#000',\r\n        padding: 10,\r\n        borderRadius: 10,\r\n        margin: 5,\r\n        marginLeft: 0,\r\n        height: 34,\r\n    },\r\n    headerWrapper: {\r\n        shadowColor: '#171717',\r\n        shadowOffset:{\r\n          width: 0,\r\n          height: 2,\r\n        },\r\n        shadowOpacity: 0.2,\r\n        shadowRadius: 3,\r\n        paddingVertical: 15,\r\n        backgroundColor: 'white',\r\n      },\r\n      childContainer: {\r\n        paddingTop: StatusBar.currentHeight,\r\n        paddingHorizontal: 20,\r\n        width: '90%',\r\n        marginVertical: 0,\r\n        marginHorizontal: 'auto',\r\n      },\r\n      flexify: {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n      },\r\n});\r\n\r\nexport {ChatRoomScreen};"]},"metadata":{},"sourceType":"module"}