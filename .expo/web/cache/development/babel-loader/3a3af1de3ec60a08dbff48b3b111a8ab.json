{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"space\"],\n    _excluded2 = [\"children\", \"direction\", \"reversed\", \"divider\", \"size\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { default as Box } from \"../Box\";\nimport { getSpacedChildren } from \"../../../utils\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar Stack = function Stack(_ref, ref) {\n  var space = _ref.space,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _usePropsResolution = usePropsResolution('Stack', _objectSpread(_objectSpread({}, props), {}, {\n    size: space\n  }), {}, {\n    resolveResponsively: ['space', 'direction']\n  }),\n      children = _usePropsResolution.children,\n      direction = _usePropsResolution.direction,\n      reversed = _usePropsResolution.reversed,\n      divider = _usePropsResolution.divider,\n      size = _usePropsResolution.size,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Box, _extends({\n    flexDirection: direction\n  }, resolvedProps, {\n    ref: ref\n  }), getSpacedChildren(children, size, direction === 'row' ? 'X' : 'Y', reversed ? 'reverse' : 'normal', divider));\n};\n\nexport default memo(forwardRef(Stack));","map":{"version":3,"sources":["Stack.tsx"],"names":["default","Stack","props","resolvedProps","usePropsResolution","size","space","resolveResponsively","useHasResponsiveProps","direction","ref","getSpacedChildren","reversed","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,SAASA,OAAO,IAAhB,GAAA;AACA,SAAA,iBAAA;AACA,SAAA,kBAAA;AAEA,SAAA,qBAAA;;AA2BA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAAA,GAAA,EAAiD;AAAA,MAAhD,KAAgD,QAAhD,KAAgD;AAAA,MAApCC,KAAoC;;AAC7D,4BAOSE,kBAAkB,CAAA,OAAA,kCAEzB,KAFyB;AAEbC,IAAAA,IAAI,EAAEC;AAFO,MAAA,EAAA,EAIzB;AAAEC,IAAAA,mBAAmB,EAAE,CAAA,OAAA,EAAA,WAAA;AAAvB,GAJyB,CAP3B;AAAA,MAAM,QAAN,uBAAM,QAAN;AAAA,MAAM,SAAN,uBAAM,SAAN;AAAA,MAAM,QAAN,uBAAM,QAAN;AAAA,MAAM,OAAN,uBAAM,OAAN;AAAA,MAAM,IAAN,uBAAM,IAAN;AAAA,MAMKJ,aANL;;AAeA,MAAIK,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;AAChC,WAAA,IAAA;AACD;;AACD,SACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA;AAAK,IAAA,aAAa,EAAEC;AAApB,GAAA,EAAA,aAAA,EAAA;AAAkD,IAAA,GAAG,EAAEC;AAAvD,GAAA,CAAA,EACGC,iBAAiB,CAAA,QAAA,EAAA,IAAA,EAGhBF,SAAS,KAATA,KAAAA,GAAAA,GAAAA,GAHgB,GAAA,EAIhBG,QAAQ,GAAA,SAAA,GAJQ,QAAA,EAFtB,OAEsB,CADpB,CADF;AAnBF,CAAA;;AAgCA,eAAeC,IAAI,CAACC,UAAU,CAA9B,KAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { default as Box } from '../Box';\nimport { getSpacedChildren } from '../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IBoxProps } from '../Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { ResponsiveValue, SpaceType } from '../../types';\n\nexport interface IStackProps extends IBoxProps<IStackProps> {\n  /**\n   * The divider element to use between elements.\n   */\n  divider?: JSX.Element;\n  /**\n   * The space between each stack item. Accepts Responsive values\n   */\n  space?: ResponsiveValue<\n    'gutter' | '2xs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | SpaceType\n  >;\n  /**\n   * Determines whether to reverse the direction of Stack Items.\n   */\n  reversed?: boolean;\n  /**\n   * The direction of the Stack Items.\n   * @default column\n   */\n  direction?: ResponsiveValue<\n    'column' | 'row' | 'column-reverse' | 'row-reverse'\n  >;\n}\n\nconst Stack = ({ space, ...props }: IStackProps, ref?: any) => {\n  const {\n    children,\n    direction,\n    reversed,\n    divider,\n    size,\n    ...resolvedProps\n  }: any = usePropsResolution(\n    'Stack',\n    { ...props, size: space },\n    {},\n    { resolveResponsively: ['space', 'direction'] }\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box flexDirection={direction} {...resolvedProps} ref={ref}>\n      {getSpacedChildren(\n        children,\n        size,\n        direction === 'row' ? 'X' : 'Y',\n        reversed ? 'reverse' : 'normal',\n        divider\n      )}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Stack));\n"]},"metadata":{},"sourceType":"module"}