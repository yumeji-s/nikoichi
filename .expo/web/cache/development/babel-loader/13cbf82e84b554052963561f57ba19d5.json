{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useRef, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport LayoutAnimation from \"react-native-web/dist/exports/LayoutAnimation\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Card, Button } from 'react-native-elements';\nimport { images } from \"../../assets/index\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar SCREEN_WIDTH = Dimensions.get('window').width;\nvar SCREEN_HEIGHT = Dimensions.get('window').height;\nvar SWIPE_THRESHOLD = 0.25 * SCREEN_WIDTH;\nvar SWIPE_OUT_DURATION = 250;\n\nvar Deck = function Deck(_ref) {\n  var data = _ref.data;\n  UIManager.setLayoutAnimationEnabledExperimental && UIManager.setLayoutAnimationEnabledExperimental(true);\n  LayoutAnimation.spring();\n  var position = useRef(new Animated.ValueXY()).current;\n  var panResponder = useRef(PanResponder.create({\n    onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {\n      return true;\n    },\n    onPanResponderMove: function onPanResponderMove(event, gesture) {\n      position.setValue({\n        x: gesture.dx,\n        y: gesture.dy\n      });\n    },\n    onPanResponderRelease: function onPanResponderRelease(event, gesture) {\n      if (gesture.dx > SWIPE_THRESHOLD) {\n        forceSwipe('right');\n      } else if (gesture.dx < -SWIPE_THRESHOLD) {\n        forceSwipe('left');\n      } else {\n        resetPosition();\n      }\n    }\n  })).current;\n\n  var forceSwipe = function forceSwipe(direction) {\n    var x = direction === 'right' ? SCREEN_WIDTH : -SCREEN_WIDTH;\n    Animated.timing(position, {\n      toValue: {\n        x: x,\n        y: 0\n      },\n      duration: SWIPE_OUT_DURATION,\n      useNativeDriver: false\n    }).start(function () {\n      return onSwipeComplete(direction);\n    });\n  };\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      index = _useState2[0],\n      setIndex = _useState2[1];\n\n  var onSwipeComplete = function onSwipeComplete(direction) {\n    var item = data[index];\n    direction === 'right' ? onSwipeRight() : onSwipeLeft();\n    position.setValue({\n      x: 0,\n      y: 0\n    });\n    setIndex(function (prevIndex) {\n      return prevIndex + 1;\n    });\n  };\n\n  var onSwipeRight = function onSwipeRight() {};\n\n  var onSwipeLeft = function onSwipeLeft() {};\n\n  var resetPosition = function resetPosition() {\n    Animated.spring(position, {\n      toValue: {\n        x: 0,\n        y: 0\n      },\n      useNativeDriver: false\n    }).start();\n  };\n\n  var rotate = position.x.interpolate({\n    inputRange: [-SCREEN_WIDTH * 1.5, 0, SCREEN_WIDTH * 1.5],\n    outputRange: ['-120deg', '0deg', '120deg']\n  });\n  return _jsxs(_Fragment, {\n    children: [index >= data.length && _jsx(RenderNoMoreCards, {}), data.map(function (item, i) {\n      if (i < index) {\n        return null;\n      }\n\n      if (i === index) {\n        return _jsx(Animated.View, _objectSpread(_objectSpread({\n          style: [_objectSpread(_objectSpread({}, position.getLayout()), {}, {\n            transform: [{\n              rotate: rotate\n            }],\n            zIndex: 1,\n            elevation: Platform.OS === 'android' ? 50 : 0\n          }), styles.cardStyle]\n        }, panResponder.panHandlers), {}, {\n          children: _jsx(RenderCards, {\n            item: item\n          })\n        }), item.id);\n      }\n\n      return _jsx(Animated.View, {\n        style: [styles.cardStyle, {\n          top: 10 * (i - index)\n        }],\n        children: _jsx(RenderCards, {\n          item: item\n        })\n      }, item.id);\n    }).reverse()]\n  });\n};\n\nvar RenderCards = function RenderCards(_ref2) {\n  var item = _ref2.item;\n  return _jsxs(Card, {\n    children: [_jsx(Card.Title, {\n      style: styles.titleStyle,\n      children: item.name\n    }), _jsx(Card.Divider, {}), _jsx(Card.Image, {\n      source: item.uri,\n      style: styles.imageStyle,\n      resizeMode: \"contain\"\n    }), _jsx(Card.Divider, {}), _jsxs(Text, {\n      style: styles.textStyle,\n      children: [\"\\u76EE\\u6A19\\uFF1A\", item.goal]\n    }), _jsx(Button, {\n      buttonStyle: styles.buttonStyle,\n      title: \"\\u30D7\\u30ED\\u30D5\\u30A3\\u30FC\\u30EB\\u306F\\u3053\\u3061\\u3089\",\n      onPress: function onPress() {\n        console.info(\"name: \" + item.name);\n      }\n    })]\n  }, item.id);\n};\n\nvar RenderNoMoreCards = function RenderNoMoreCards() {\n  return _jsxs(Card, {\n    style: styles.cardStyle,\n    children: [_jsx(Card.Title, {\n      style: styles.titleStyle,\n      children: \"\\u7D42\\u4E86\"\n    }), _jsx(Card.Divider, {}), _jsx(Text, {\n      style: styles.textStyle,\n      children: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    }), _jsx(Button, {\n      buttonStyle: styles.buttonStyle,\n      title: \"\\u3082\\u3046\\u4E00\\u5EA6\",\n      onPress: function onPress() {}\n    })]\n  });\n};\n\nvar SwipeScreen = function SwipeScreen() {\n  var DATA = [{\n    id: 1,\n    name: '浜辺　美波',\n    uri: images.minami,\n    goal: '若手No.1女優'\n  }, {\n    id: 2,\n    name: '新垣　結衣',\n    uri: images.yui,\n    goal: '若手No.2女優'\n  }, {\n    id: 3,\n    name: '広瀬　すず',\n    uri: images.suzu,\n    goal: '若手No.3女優'\n  }, {\n    id: 4,\n    name: '永野　芽郁',\n    uri: images.mei,\n    goal: '若手No.4女優'\n  }, {\n    id: 5,\n    name: '今田　美桜',\n    uri: images.mio,\n    goal: '若手No.5女優'\n  }];\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(Deck, {\n      data: DATA\n    })\n  });\n};\n\nvar IMAGE_HEIGHT = SCREEN_HEIGHT / 2;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 40,\n    backgroundColor: '#fff',\n    alignItems: 'center'\n  },\n  cardStyle: {\n    marginTop: \"10%\",\n    position: 'absolute',\n    width: SCREEN_WIDTH,\n    borderRadius: 50\n  },\n  imageStyle: {\n    height: IMAGE_HEIGHT,\n    width: SCREEN_WIDTH\n  },\n  titleStyle: {\n    fontSize: 18\n  },\n  textStyle: {\n    marginBottom: 10,\n    fontSize: 16\n  },\n  buttonStyle: {\n    borderRadius: 50,\n    marginLeft: 0,\n    marginRight: 0,\n    marginBottom: 0\n  }\n});\nexport { SwipeScreen };","map":{"version":3,"sources":["C:/Users/yumej/github/nikoichi/src/screens/SwipeScreen.js"],"names":["React","useRef","useState","Card","Button","images","SCREEN_WIDTH","Dimensions","get","width","SCREEN_HEIGHT","height","SWIPE_THRESHOLD","SWIPE_OUT_DURATION","Deck","data","UIManager","setLayoutAnimationEnabledExperimental","LayoutAnimation","spring","position","Animated","ValueXY","current","panResponder","PanResponder","create","onStartShouldSetPanResponder","onPanResponderMove","event","gesture","setValue","x","dx","y","dy","onPanResponderRelease","forceSwipe","resetPosition","direction","timing","toValue","duration","useNativeDriver","start","onSwipeComplete","index","setIndex","item","onSwipeRight","onSwipeLeft","prevIndex","rotate","interpolate","inputRange","outputRange","length","map","i","getLayout","transform","zIndex","elevation","Platform","OS","styles","cardStyle","panHandlers","id","top","reverse","RenderCards","titleStyle","name","uri","imageStyle","textStyle","goal","buttonStyle","console","info","RenderNoMoreCards","SwipeScreen","DATA","minami","yui","suzu","mei","mio","container","IMAGE_HEIGHT","StyleSheet","flex","marginTop","backgroundColor","alignItems","borderRadius","fontSize","marginBottom","marginLeft","marginRight"],"mappings":"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","sourcesContent":["//import Deck from '../components/SwipeCard';\r\nimport React, { useRef, useState } from 'react';\r\nimport {\r\n  View,\r\n  StyleSheet,\r\n  Text,\r\n  Animated,\r\n  PanResponder,\r\n  Dimensions,\r\n  LayoutAnimation,\r\n  UIManager,\r\n  Platform,\r\n} from 'react-native';\r\nimport { Card, Button } from 'react-native-elements';\r\n\r\nimport { images } from '../../assets/index';\r\n\r\nconst SCREEN_WIDTH = Dimensions.get('window').width;\r\nconst SCREEN_HEIGHT = Dimensions.get('window').height;\r\nconst SWIPE_THRESHOLD = 0.25 * SCREEN_WIDTH;\r\nconst SWIPE_OUT_DURATION = 250;\r\n\r\nconst Deck = ({ data }) => {\r\n  UIManager.setLayoutAnimationEnabledExperimental &&\r\n    UIManager.setLayoutAnimationEnabledExperimental(true);\r\n  LayoutAnimation.spring();\r\n\r\n  const position = useRef(new Animated.ValueXY()).current;\r\n  const panResponder = useRef(\r\n    PanResponder.create({\r\n      onStartShouldSetPanResponder: () => true,\r\n      onPanResponderMove: (event, gesture) => {\r\n        position.setValue({ x: gesture.dx, y: gesture.dy });\r\n      },\r\n      onPanResponderRelease: (event, gesture) => {\r\n        if (gesture.dx > SWIPE_THRESHOLD) {\r\n          forceSwipe('right');\r\n        } else if (gesture.dx < -SWIPE_THRESHOLD) {\r\n          forceSwipe('left');\r\n        } else {\r\n          resetPosition();\r\n        }\r\n      },\r\n    })\r\n  ).current;\r\n\r\n  const forceSwipe = (direction) => {\r\n    const x = direction === 'right' ? SCREEN_WIDTH : -SCREEN_WIDTH;\r\n    Animated.timing(position, {\r\n      toValue: { x, y: 0 },\r\n      duration: SWIPE_OUT_DURATION,\r\n      useNativeDriver: false,\r\n    }).start(() => onSwipeComplete(direction));\r\n  };\r\n  \r\n  const [index, setIndex] = useState(0);\r\n\r\n  const onSwipeComplete = (direction) => {\r\n    const item = data[index];\r\n\r\n    direction === 'right' ? onSwipeRight() : onSwipeLeft();\r\n    position.setValue({ x: 0, y: 0 });\r\n    setIndex((prevIndex) => prevIndex + 1);\r\n  };\r\n\r\n  const onSwipeRight = () => {};\r\n  const onSwipeLeft = () => {};\r\n\r\n  const resetPosition = () => {\r\n    Animated.spring(position, {\r\n      toValue: { x: 0, y: 0 },\r\n      useNativeDriver: false,\r\n    }).start();\r\n  };\r\n\r\n  const rotate = position.x.interpolate({\r\n    inputRange: [-SCREEN_WIDTH * 1.5, 0, SCREEN_WIDTH * 1.5],\r\n    outputRange: ['-120deg', '0deg', '120deg'],\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {index >= data.length && <RenderNoMoreCards />}\r\n      {data\r\n        .map((item, i) => {\r\n          if (i < index) {\r\n            return null;\r\n          }\r\n\r\n          if (i === index) {\r\n            return (\r\n              <Animated.View\r\n                key={item.id}\r\n                style={[\r\n                  {\r\n                    ...position.getLayout(),\r\n                    transform: [{ rotate }],\r\n                    zIndex: 1,\r\n                    elevation: (Platform.OS === 'android') ? 50 : 0\r\n                  },\r\n                  styles.cardStyle,\r\n                ]}\r\n                {...panResponder.panHandlers}\r\n              >\r\n                <RenderCards item={item} />\r\n              </Animated.View>\r\n            );\r\n          }\r\n\r\n          return (\r\n            <Animated.View\r\n              key={item.id}\r\n              style={[styles.cardStyle, { top: 10 * (i - index) }]}\r\n            >\r\n              <RenderCards item={item} />\r\n            </Animated.View>\r\n          );\r\n        })\r\n        .reverse()}\r\n    </>\r\n  );\r\n};\r\n\r\nconst RenderCards = ({ item }) => {\r\n  return (\r\n    <Card key={item.id}>\r\n      <Card.Title style={styles.titleStyle}>{item.name}</Card.Title>\r\n      <Card.Divider />\r\n      <Card.Image source={item.uri} style={styles.imageStyle} resizeMode='contain'/>\r\n      <Card.Divider />\r\n      <Text style={styles.textStyle}>目標：{item.goal}</Text>\r\n      <Button buttonStyle={styles.buttonStyle} title=\"プロフィールはこちら\" onPress={() => {console.info(`name: ${item.name}`)}} />\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst RenderNoMoreCards = () => {\r\n  return (\r\n    <Card style={styles.cardStyle}>\r\n      <Card.Title style={styles.titleStyle}>終了</Card.Title>\r\n      <Card.Divider />\r\n      <Text style={styles.textStyle}>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</Text>\r\n      <Button buttonStyle={styles.buttonStyle} title=\"もう一度\" onPress={() => {}}/>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst SwipeScreen = () => {\r\n\r\n    const DATA = [\r\n        {\r\n          id: 1,\r\n          name: '浜辺　美波',\r\n          uri: images.minami,\r\n          goal: '若手No.1女優',\r\n        },\r\n        {\r\n          id: 2,\r\n          name: '新垣　結衣',\r\n          uri: images.yui,\r\n          goal: '若手No.2女優',\r\n        },\r\n        {\r\n          id: 3,\r\n          name: '広瀬　すず',\r\n          uri: images.suzu,\r\n          goal: '若手No.3女優',\r\n        },\r\n        {\r\n          id: 4,\r\n          name: '永野　芽郁',\r\n          uri: images.mei,\r\n          goal: '若手No.4女優',\r\n        },\r\n        {\r\n          id: 5,\r\n          name: '今田　美桜',\r\n          uri: images.mio,\r\n          goal: '若手No.5女優',\r\n        },\r\n      ];\r\n\r\n    return (\r\n      <View style={styles.container}>\r\n        <Deck data={DATA} />\r\n      </View>\r\n    );\r\n}\r\n\r\nconst IMAGE_HEIGHT = SCREEN_HEIGHT / 2;\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      marginTop: 40,\r\n      backgroundColor: '#fff',\r\n      alignItems: 'center',\r\n    },\r\n    cardStyle: {\r\n      marginTop: \"10%\",\r\n      position: 'absolute',\r\n      width: SCREEN_WIDTH,\r\n      borderRadius: 50,\r\n    },\r\n    imageStyle: {\r\n      height: IMAGE_HEIGHT,\r\n      width: SCREEN_WIDTH,\r\n    },\r\n    titleStyle: { fontSize: 18 },\r\n    textStyle: { marginBottom: 10, fontSize: 16 },\r\n    buttonStyle: {\r\n      borderRadius: 50,\r\n      marginLeft: 0,\r\n      marginRight: 0,\r\n      marginBottom: 0,\r\n    },\r\n});\r\n\r\n\r\nexport {SwipeScreen};"]},"metadata":{},"sourceType":"module"}