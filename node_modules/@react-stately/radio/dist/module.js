import {useControlledState as $lfBG4$useControlledState} from "@react-stately/utils";
import {useMemo as $lfBG4$useMemo, useState as $lfBG4$useState} from "react";

function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
var $7641130e45ddf243$exports = {};

$parcel$export($7641130e45ddf243$exports, "useRadioGroupState", () => $7641130e45ddf243$export$bca9d026f8e704eb);


let $7641130e45ddf243$var$instance = Math.round(Math.random() * 10000000000);
let $7641130e45ddf243$var$i = 0;
function $7641130e45ddf243$export$bca9d026f8e704eb(props) {
    // Preserved here for backward compatibility. React Aria now generates the name instead of stately.
    let name = $lfBG4$useMemo(()=>props.name || `radio-group-${$7641130e45ddf243$var$instance}-${++$7641130e45ddf243$var$i}`
    , [
        props.name
    ]);
    let [selectedValue, setSelected] = $lfBG4$useControlledState(props.value, props.defaultValue, props.onChange);
    let [lastFocusedValue, setLastFocusedValue] = $lfBG4$useState(null);
    let setSelectedValue = (value)=>{
        if (!props.isReadOnly && !props.isDisabled) setSelected(value);
    };
    return {
        name: name,
        selectedValue: selectedValue,
        setSelectedValue: setSelectedValue,
        lastFocusedValue: lastFocusedValue,
        setLastFocusedValue: setLastFocusedValue,
        isDisabled: props.isDisabled || false,
        isReadOnly: props.isReadOnly || false
    };
}




export {$7641130e45ddf243$export$bca9d026f8e704eb as useRadioGroupState};
//# sourceMappingURL=module.js.map
