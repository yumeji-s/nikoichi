{"version":3,"sources":["NativeBaseProvider.tsx"],"names":["React","SafeAreaProvider","initialWindowMetrics","defaultInitialWindowMetrics","SSRProvider","theme","defaultTheme","HybridProvider","OverlayProvider","ToastProvider","ToastRef","defaultConfig","NativeBaseConfigProvider","useToast","Platform","useWindowDimensions","getClosestBreakpoint","platformSpecificSpaceUnits","defaultInitialWindowMetricsBasedOnPlatform","select","web","frame","x","y","width","height","insets","top","left","right","bottom","default","NativeBaseProvider","props","colorModeManager","config","children","propsTheme","isSSR","newTheme","useMemo","enableRem","windowWidth","currentBreakpoint","breakpoints","InitializeToastRef","toast","current"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  SafeAreaProvider,\n  Metrics,\n  initialWindowMetrics as defaultInitialWindowMetrics,\n} from 'react-native-safe-area-context';\nimport { SSRProvider } from '@react-native-aria/utils';\nimport { theme as defaultTheme, ITheme } from './../theme';\nimport type { IColorModeProviderProps } from './color-mode';\nimport HybridProvider from './hybrid-overlay/HybridProvider';\nimport { OverlayProvider } from '@react-native-aria/overlays';\nimport { ToastProvider, ToastRef } from '../components/composites/Toast';\nimport {\n  defaultConfig,\n  INativebaseConfig,\n  NativeBaseConfigProvider,\n} from './NativeBaseContext';\nimport { useToast } from '../components/composites/Toast';\nimport { Platform, useWindowDimensions } from 'react-native';\nimport {\n  getClosestBreakpoint,\n  platformSpecificSpaceUnits,\n} from '../theme/tools/utils';\n\n// For SSR to work, we need to pass initial insets as 0 values on web.\n\n// https://github.com/th3rdwave/react-native-safe-area-context/issues/132\nconst defaultInitialWindowMetricsBasedOnPlatform: Metrics | null = Platform.select(\n  {\n    web: {\n      frame: { x: 0, y: 0, width: 0, height: 0 },\n      insets: { top: 0, left: 0, right: 0, bottom: 0 },\n    },\n    default: defaultInitialWindowMetrics,\n  }\n);\n\nexport interface NativeBaseProviderProps {\n  theme?: ITheme;\n  colorModeManager?: IColorModeProviderProps['colorModeManager'];\n  children?: React.ReactNode;\n  initialWindowMetrics?: any;\n  config?: INativebaseConfig;\n  isSSR?: boolean;\n  // Refer https://github.com/th3rdwave/react-native-safe-area-context#testing\n}\n\nconst NativeBaseProvider = (props: NativeBaseProviderProps) => {\n  const {\n    colorModeManager,\n    config = defaultConfig,\n    children,\n    theme: propsTheme = defaultTheme,\n    initialWindowMetrics,\n    isSSR,\n  } = props;\n  const theme = config.theme ?? propsTheme;\n\n  const newTheme = React.useMemo(() => {\n    if (config.enableRem) {\n      return platformSpecificSpaceUnits(theme);\n    }\n    return theme;\n  }, [config.enableRem, theme]);\n\n  const windowWidth = useWindowDimensions()?.width;\n\n  const currentBreakpoint = React.useMemo(\n    () => getClosestBreakpoint(newTheme.breakpoints, windowWidth),\n    [windowWidth, newTheme.breakpoints]\n  );\n\n  return (\n    <NativeBaseConfigProvider\n      theme={newTheme}\n      config={config}\n      currentBreakpoint={currentBreakpoint}\n      isSSR={isSSR}\n    >\n      <SafeAreaProvider\n        initialMetrics={\n          initialWindowMetrics ?? defaultInitialWindowMetricsBasedOnPlatform\n        }\n      >\n        <HybridProvider\n          colorModeManager={colorModeManager}\n          options={theme.config}\n        >\n          <OverlayProvider>\n            <ToastProvider>\n              <InitializeToastRef />\n              <SSRProvider>{children}</SSRProvider>\n            </ToastProvider>\n          </OverlayProvider>\n        </HybridProvider>\n      </SafeAreaProvider>\n    </NativeBaseConfigProvider>\n  );\n};\n\nconst InitializeToastRef = () => {\n  const toast = useToast();\n  ToastRef.current = toast;\n  return null;\n};\n\nexport { NativeBaseProvider };\n"]}