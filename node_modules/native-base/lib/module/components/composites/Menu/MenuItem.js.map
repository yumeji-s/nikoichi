{"version":3,"sources":["MenuItem.tsx"],"names":["React","forwardRef","memo","Text","usePropsResolution","Pressable","MenuContext","useMenuItem","mergeRefs","useHasResponsiveProps","MenuItem","children","isDisabled","onPress","style","textValue","props","ref","closeOnSelect","onClose","useContext","menuItemRef","useRef","mergedRef","_text","resolvedProps","textContent","setTextContent","useState","useEffect","menuItem","current","trim","menuItemProps","disabled","e","Children","map","child","index"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport Text from '../../primitives/Text';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Pressable } from '../../primitives/Pressable';\nimport type { IMenuItemProps } from './types';\nimport { MenuContext } from './MenuContext';\nimport { useMenuItem } from './useMenu';\nimport { mergeRefs } from '../../../utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst MenuItem = (\n  { children, isDisabled, onPress, style, textValue, ...props }: IMenuItemProps,\n  ref: any\n) => {\n  const { closeOnSelect, onClose } = React.useContext(MenuContext);\n  const menuItemRef = React.useRef<any>(null);\n  const mergedRef = mergeRefs([menuItemRef, ref]);\n  const { _text, ...resolvedProps } = usePropsResolution('MenuItem', props, {\n    isDisabled,\n  });\n  const [textContent, setTextContent] = React.useState('');\n  React.useEffect(() => {\n    const menuItem = menuItemRef.current;\n    if (menuItem) {\n      setTextContent((menuItem.textContent ?? '').trim());\n    }\n  }, [children]);\n\n  const menuItemProps = useMenuItem({\n    textValue: textValue ?? textContent,\n    ref: menuItemRef,\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Pressable\n      {...menuItemProps}\n      {...resolvedProps}\n      ref={mergedRef}\n      style={style}\n      disabled={isDisabled}\n      // TouchableHighlight doesn't announce disabled, even if disabled prop is set\n      accessibilityState={{\n        disabled: isDisabled,\n      }}\n      onPress={(e: any) => {\n        if (!isDisabled) {\n          onPress && onPress(e);\n          if (closeOnSelect) {\n            onClose && onClose();\n          }\n        }\n      }}\n    >\n      <>\n        {React.Children.map(children, (child, index: any) => {\n          if (typeof child === 'string' || typeof child === 'number') {\n            return (\n              <Text {..._text} key={`menu-item-${index}`}>\n                {child}\n              </Text>\n            );\n          } else {\n            return child;\n          }\n        })}\n      </>\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(MenuItem));\n"]}