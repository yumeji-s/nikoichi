{"version":3,"sources":["Stack.tsx"],"names":["Stack","space","props","ref","children","direction","reversed","divider","size","resolvedProps","resolveResponsively"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;AA2BA,MAAMA,KAAK,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAAS,KAAGC;AAAZ,CAAD,EAAmCC,GAAnC,KAAiD;AAC7D,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,OAJI;AAKJC,IAAAA,IALI;AAMJ,OAAGC;AANC,MAOG,uCACP,OADO,EAEP,EAAE,GAAGP,KAAL;AAAYM,IAAAA,IAAI,EAAEP;AAAlB,GAFO,EAGP,EAHO,EAIP;AAAES,IAAAA,mBAAmB,EAAE,CAAC,OAAD,EAAU,WAAV;AAAvB,GAJO,CAPT,CAD6D,CAe7D;;AACA,MAAI,kDAAsBR,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,6BAAC,YAAD;AAAK,IAAA,aAAa,EAAEG;AAApB,KAAmCI,aAAnC;AAAkD,IAAA,GAAG,EAAEN;AAAvD,MACG,8BACCC,QADD,EAECI,IAFD,EAGCH,SAAS,KAAK,KAAd,GAAsB,GAAtB,GAA4B,GAH7B,EAICC,QAAQ,GAAG,SAAH,GAAe,QAJxB,EAKCC,OALD,CADH,CADF;AAWD,CA9BD;;4BAgCe,+BAAK,uBAAWP,KAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { default as Box } from '../Box';\nimport { getSpacedChildren } from '../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IBoxProps } from '../Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { ResponsiveValue, SpaceType } from '../../types';\n\nexport interface IStackProps extends IBoxProps<IStackProps> {\n  /**\n   * The divider element to use between elements.\n   */\n  divider?: JSX.Element;\n  /**\n   * The space between each stack item. Accepts Responsive values\n   */\n  space?: ResponsiveValue<\n    'gutter' | '2xs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | SpaceType\n  >;\n  /**\n   * Determines whether to reverse the direction of Stack Items.\n   */\n  reversed?: boolean;\n  /**\n   * The direction of the Stack Items.\n   * @default column\n   */\n  direction?: ResponsiveValue<\n    'column' | 'row' | 'column-reverse' | 'row-reverse'\n  >;\n}\n\nconst Stack = ({ space, ...props }: IStackProps, ref?: any) => {\n  const {\n    children,\n    direction,\n    reversed,\n    divider,\n    size,\n    ...resolvedProps\n  }: any = usePropsResolution(\n    'Stack',\n    { ...props, size: space },\n    {},\n    { resolveResponsively: ['space', 'direction'] }\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box flexDirection={direction} {...resolvedProps} ref={ref}>\n      {getSpacedChildren(\n        children,\n        size,\n        direction === 'row' ? 'X' : 'Y',\n        reversed ? 'reverse' : 'normal',\n        divider\n      )}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Stack));\n"]}