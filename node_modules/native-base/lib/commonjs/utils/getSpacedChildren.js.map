{"version":3,"sources":["getSpacedChildren.tsx"],"names":["children","space","axis","reverse","divider","childrenArray","React","Children","toArray","orientation","spacingProp","mx","my","cloneElement","map","child","index","key","length","width","height"],"mappings":";;;;;;;AAAA;;AACA;;;;eAce,CACbA,QADa,EAEbC,KAFa,EAGbC,IAHa,EAIbC,OAJa,EAKbC,OALa,KAML;AACR,MAAIC,aAAa,GAAGC,eAAMC,QAAN,CAAeC,OAAf,CAAuBR,QAAvB,CAApB;;AACAK,EAAAA,aAAa,GACXF,OAAO,KAAK,SAAZ,GAAwB,CAAC,GAAGE,aAAJ,EAAmBF,OAAnB,EAAxB,GAAuDE,aADzD;AAGA,QAAMI,WAAW,GAAGP,IAAI,KAAK,GAAT,GAAe,UAAf,GAA4B,YAAhD,CALQ,CAOR;;AACA,MAAIE,OAAJ,EAAa;AACX,UAAMM,WAAmB,GAAG,EAC1B,IAAIR,IAAI,KAAK,GAAT,GAAe;AAAES,QAAAA,EAAE,EAAEV;AAAN,OAAf,GAA+B;AAAEW,QAAAA,EAAE,EAAEX;AAAN,OAAnC;AAD0B,KAA5B;AAIAG,IAAAA,OAAO,gBAAGE,eAAMO,YAAN,CAAmBT,OAAnB,EAA4B;AACpCK,MAAAA,WADoC;AAEpC,SAAGC;AAFiC,KAA5B,CAAV;AAKAL,IAAAA,aAAa,GAAGA,aAAa,CAACS,GAAd,CAAkB,CAACC,KAAD,EAAaC,KAAb,KAA+B;AAAA;;AAC/D,0BACE,6BAAC,cAAD,CAAO,QAAP;AAAgB,QAAA,GAAG,gBAAED,KAAK,CAACE,GAAR,0EAA+BD,KAA/B;AAAnB,SACGD,KADH,EAEGC,KAAK,GAAGX,aAAa,CAACa,MAAd,GAAuB,CAA/B,IAAoCd,OAFvC,CADF;AAMD,KAPe,CAAhB;AAQD,GAlBD,MAkBO;AACL,UAAMM,WAAmB,GAAG,EAC1B,IAAIR,IAAI,KAAK,GAAT,GAAe;AAAEiB,QAAAA,KAAK,EAAElB;AAAT,OAAf,GAAkC;AAAEmB,QAAAA,MAAM,EAAEnB;AAAV,OAAtC;AAD0B,KAA5B;AAGAI,IAAAA,aAAa,GAAGA,aAAa,CAACS,GAAd,CAAkB,CAACC,KAAD,EAAaC,KAAb,KAA+B;AAAA;;AAC/D,0BACE,6BAAC,cAAD,CAAO,QAAP;AAAgB,QAAA,GAAG,iBAAED,KAAK,CAACE,GAAR,4EAA+BD,KAA/B;AAAnB,SACGD,KADH,EAEGC,KAAK,GAAGX,aAAa,CAACa,MAAd,GAAuB,CAA/B,iBAAoC,6BAAC,YAAD,EAASR,WAAT,CAFvC,CADF;AAMD,KAPe,CAAhB;AAQD;;AAED,SAAOL,aAAP;AACD,C","sourcesContent":["import React from 'react';\nimport { default as Box } from '../components/primitives/Box';\nimport type { SpaceType as ThemeSpaceType } from '../components/types';\n\ntype SpaceType =\n  | 'gutter'\n  | '2xs'\n  | 'xs'\n  | 'sm'\n  | 'md'\n  | 'lg'\n  | 'xl'\n  | '2xl'\n  | ThemeSpaceType;\n\nexport default (\n  children: JSX.Element[] | JSX.Element,\n  space: undefined | SpaceType,\n  axis: 'X' | 'Y',\n  reverse: string,\n  divider: JSX.Element | undefined\n): any => {\n  let childrenArray = React.Children.toArray(children);\n  childrenArray =\n    reverse === 'reverse' ? [...childrenArray].reverse() : childrenArray;\n\n  const orientation = axis === 'X' ? 'vertical' : 'horizontal';\n\n  // If there's a divider, we wrap it with a Box and apply vertical and horizontal margins else we add a spacer Box with height or width\n  if (divider) {\n    const spacingProp: object = {\n      ...(axis === 'X' ? { mx: space } : { my: space }),\n    };\n\n    divider = React.cloneElement(divider, {\n      orientation,\n      ...spacingProp,\n    });\n\n    childrenArray = childrenArray.map((child: any, index: number) => {\n      return (\n        <React.Fragment key={child.key ?? `spaced-child-${index}`}>\n          {child}\n          {index < childrenArray.length - 1 && divider}\n        </React.Fragment>\n      );\n    });\n  } else {\n    const spacingProp: object = {\n      ...(axis === 'X' ? { width: space } : { height: space }),\n    };\n    childrenArray = childrenArray.map((child: any, index: number) => {\n      return (\n        <React.Fragment key={child.key ?? `spaced-child-${index}`}>\n          {child}\n          {index < childrenArray.length - 1 && <Box {...spacingProp} />}\n        </React.Fragment>\n      );\n    });\n  }\n\n  return childrenArray;\n};\n"]}